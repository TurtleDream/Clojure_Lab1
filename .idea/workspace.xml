<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="61758e3f-2a65-4e3d-82c3-1d8f20c004f5" name="Default Changelist" comment="" />
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/lab1/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state>
              <caret selection-end-line="23" selection-end-column="25" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/test/lab1/core_test.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="153">
              <caret line="9" column="29" selection-start-line="9" selection-start-column="29" selection-end-line="9" selection-end-column="29" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/test/test.clj" />
        <option value="$PROJECT_DIR$/src/lab1/core.clj" />
        <option value="$PROJECT_DIR$/test/lab1/core_test.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="-8" />
    <option name="y" value="-8" />
    <option name="width" value="1382" />
    <option name="height" value="744" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="lab1" type="b2602c69:ProjectViewProjectNode" />
              <item name="lab1" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="lab1" type="b2602c69:ProjectViewProjectNode" />
              <item name="lab1" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="lab1" type="b2602c69:ProjectViewProjectNode" />
              <item name="lab1" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="lab1" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="lab1" type="b2602c69:ProjectViewProjectNode" />
              <item name="lab1" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="lab1" type="b2602c69:ProjectViewProjectNode" />
              <item name="lab1" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
              <item name="lab1" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1552865590638" />
    <property name="last_opened_file_path" value="$USER_HOME$/Desktop/123/untitled4" />
    <property name="settings.editor.selected.configurable" value="configurable.group.language" />
  </component>
  <component name="ReplState" timestamp="1553107549601">{:repl-history {:ide [], :local [{:command &quot;(ns lab1.core-test\n  (:require [clojure.test :refer :all]\n            [lab1.core :refer :all]))\n\n(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                        (= result (group param))\n                                        {\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {2 [4 8 15 16 23 42]} )))&quot;, :offset 332, :ns &quot;lab1.core-test&quot;} {:command &quot;(ns lab1.core-test\n  (:require [clojure.test :refer :all]\n            [lab1.core :refer :all]))\n\n(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                        (= result (group param))\n                                        {\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} '{2 [4 8 15 16 23 42]} )))&quot;, :offset 333, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                        (= result (group (:n param) (:vec param)))\n                                        {\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {:n 2 :vec [4 8 15 16 23 42]})))&quot;, :offset 260, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                        (= result (group (:n param)(:vec param)))\n                                        {:n 2 :vec [4 8 15 16 23 42]})))&quot;, :offset 212, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                        (= result (group (:n param)(:vec param)))\n                                       [\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)] {:n 2 :vec [4 8 15 16 23 42]})))&quot;, :offset 258, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                        (= result (group (:n param)(:vec param)))\n                                       [{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)}] {:n 2 :vec [4 8 15 16 23 42]})))&quot;, :offset 260, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                        (= result (group (:n param)(:vec param)))\n                                       [] {:n 2 :vec [4 8 15 16 23 42]})))&quot;, :offset 214, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                        (= result (group (:n param)(:vec param)))\n                                       {} {:n 2 :vec [4 8 15 16 23 42]})))&quot;, :offset 214, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                        (= result (group (:n param)(:vec param)))\n                                       '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {:n 2 :vec [4 8 15 16 23 42]})))&quot;, :offset 259, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                        (= result (group (:n param)(:vec param)))\n                                        '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {:n 2 :vec [4 8 15 16 23 42]}\n                                        '{\&quot;Key1\&quot; (4 8 15), \&quot;Key2\&quot; (16 23 42)} {:n 3 :vec [4 8 15 16 23 42]}\n                                        '{\&quot;Key1\&quot; (4 8 15) \&quot;Key2\&quot; (16 23)} {:n 4 :vec [4 8 15 16 23 42]})))&quot;, :offset 472, :ns &quot;lab1.core-test&quot;} {:command &quot;(ns lab1.core)\n(defn group [size vector]\n  (loop [map (array-map)\n         partition (partition size size nil vector)\n         i 0]\n    (if-not(empty? partition)\n      (recur (assoc map (str \&quot;Key\&quot; (inc i)) (first partition))\n             (rest partition)\n             (inc i))\n      map)))\n\n(group 2 [4 8 15 16 23 42])&quot;, :offset 318, :ns &quot;user&quot;} {:command &quot;(ns lab1.core-test\n  (:require [clojure.test :refer :all]\n            [lab1.core :refer :all]))&quot;, :offset 95, :ns &quot;lab1.core&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group (:n param)(:vec param)))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {:n 2 :vec [4 8 15 16 23 42]}\n                                           '{\&quot;Key1\&quot; (4 8 15), \&quot;Key2\&quot; (16 23 42)} {:n 3 :vec [4 8 15 16 23 42]}\n                                           '{\&quot;Key1\&quot; (4 8 15) \&quot;Key2\&quot; (16 23)} {:n 4 :vec [4 8 15 16 23 42]})))\n&quot;, :offset 485, :ns &quot;lab1.core-test&quot;} {:command &quot;(ns lab1.core-test\n  (:require [clojure.test :refer :all]\n            [lab1.core :refer :all]))\n\n(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group (:n param)(:vec param)))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {:n 2 :vec [4 8 15 16 23 42]}\n                                           '{\&quot;Key1\&quot; (4 8 15), \&quot;Key2\&quot; (16 23 42)} {:n 3 :vec [4 8 15 16 23 42]}\n                                           '{\&quot;Key1\&quot; (4 8 15) \&quot;Key2\&quot; (16 23)} {:n 4 :vec [4 8 15 16 23 42]})))\n;;(run-tests 'lab1.core-test)&quot;, :offset 611, :ns &quot;user&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group param))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {:n 2 :vec [4 8 15 16 23 42]}\n                                           '{\&quot;Key1\&quot; (4 8 15), \&quot;Key2\&quot; (16 23 42)} {:n 3 :vec [4 8 15 16 23 42]}\n                                           '{\&quot;Key1\&quot; (4 8 15) \&quot;Key2\&quot; (16 23)} {4 [4 8 15 16 23 42]})))&quot;, :offset 459, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group (param)))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {:n 2 :vec [4 8 15 16 23 42]}\n                                           '{\&quot;Key1\&quot; (4 8 15), \&quot;Key2\&quot; (16 23 42)} {:n 3 :vec [4 8 15 16 23 42]}\n                                           '{\&quot;Key1\&quot; (4 8 15) \&quot;Key2\&quot; (16 23)} {4 [4 8 15 16 23 42]})))&quot;, :offset 461, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group (param)))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {:n 2 :vec [4 8 15 16 23 42]}\n                                           '{\&quot;Key1\&quot; (4 8 15), \&quot;Key2\&quot; (16 23 42)} {:n 3 :vec [4 8 15 16 23 42]}\n                                           '{\&quot;Key1\&quot; (4 8 15) \&quot;Key2\&quot; (16 23)} 4 [4 8 15 16 23 42])))&quot;, :offset 459, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group (param)))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {:n 2 :vec [4 8 15 16 23 42]}\n                                           '{\&quot;Key1\&quot; (4 8 15), \&quot;Key2\&quot; (16 23 42)} {:n 3 :vec [4 8 15 16 23 42]}\n                                           '{\&quot;Key1\&quot; (4 8 15) \&quot;Key2\&quot; (16 23)} {:n 3 :vec [4 8 15 16 23 42]})))&quot;, :offset 469, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group (param)))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {:n 2 :vec [4 8 15 16 23 42]})))&quot;, :offset 251, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group param))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {2 [4 8 15 16 23 42]})))&quot;, :offset 241, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group param))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} 2 [4 8 15 16 23 42])))&quot;, :offset 239, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group param))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} (2 [4 8 15 16 23 42]))))&quot;, :offset 241, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group param))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} [2 [4 8 15 16 23 42]])))&quot;, :offset 241, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group [param]))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} [2 [4 8 15 16 23 42]])))&quot;, :offset 243, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group [param]))\n                                           '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} 2 [4 8 15 16 23 42])))&quot;, :offset 241, :ns &quot;lab1.core-test&quot;} {:command &quot;(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                        (= result (group (:n param)(:vec param)))\n                                        '{\&quot;Key1\&quot; (4 8), \&quot;Key2\&quot; (15 16), \&quot;Key3\&quot; (23 42)} {:n 2 :vec [4 8 15 16 23 42]}\n                                        '{\&quot;Key1\&quot; (4 8 15), \&quot;Key2\&quot; (16 23 42)} {:n 3 :vec [4 8 15 16 23 42]}\n                                        '{\&quot;Key1\&quot; (4 8 15) \&quot;Key2\&quot; (16 23)} {:n 4 :vec [4 8 15 16 23 42]})))\n&quot;, :offset 473, :ns &quot;lab1.core-test&quot;} {:command &quot;(ns lab1.core)\n(defn group [size vector]\n  (loop [map (array-map)\n         partition (partition size size nil vector)\n         i 0]\n    (if-not(empty? partition)\n      (recur (assoc map (str \&quot;Key\&quot; (inc i)) (first partition))\n             (rest partition)\n             (inc i))\n      map)))&quot;, :offset 289, :ns &quot;user&quot;} {:command &quot;(group 2 [4 8 15 16 23 42])&quot;, :offset 27, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map {:ch :nc} (array-map)\n         partition (partition 1 1 nil vector)\n         i 0]\n    (if-not(empty? partition)\n      (recur (assoc map (str \&quot;Key\&quot; (inc i)) (first partition))\n             (rest partition)\n             (inc i))\n      map)))&quot;, :offset 288, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         partition (partition 1 1 nil vector)\n         i 0]\n    (if-not(empty? partition)\n      (recur (assoc map (str \&quot;Key\&quot; (inc i)) (first partition))\n             (rest partition)\n             (inc i))\n      map)))&quot;, :offset 278, :ns &quot;lab1.core&quot;} {:command &quot;(group 3 [4 8 15 16 23 42])&quot;, :offset 27, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         partition (partition 1 1 nil vector)\n         i 0]\n    (if (= (rem (first partition) 2 ) 0) \n      (recur (assoc map (str \&quot;Key\&quot; (inc i)) (first partition))\n             (rest partition)\n             (inc i))\n      map)))&quot;, :offset 290, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         partition (partition 1 1 nil vector)]\n    (if (= (rem (first partition) 2 ) 0) \n      (recur (assoc map (str \&quot;Chet\&quot;) (first partition))\n             (rest partition))\n      (recur (assoc map (str \&quot;Nechet\&quot;) (first partition))\n             (rest partition)))\n      ))&quot;, :offset 335, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         partition (partition 1 1 nil vector)]\n    (if (= (rem (first partition) 2 ) 0) \n      (recur (assoc map (str \&quot;Chet\&quot;) (first partition))\n             (rest partition))\n      (recur (assoc map (str \&quot;Nechet\&quot;) (first partition))\n             (rest partition)))\n      )\n  map)&quot;, :offset 341, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         partition (partition 1 1 nil vector)]\n    (if (= (rem (first partition) 2 ) 0) \n      (recur (assoc map (str \&quot;Chet\&quot;) (first partition))\n             (rest partition))\n      (recur (assoc map (str \&quot;Nechet\&quot;) (first partition))\n             (rest partition)))\n      )\n  )&quot;, :offset 338, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         partition (partition 1 vector)]\n    (if (= (rem (first partition) 2 ) 0) \n      (recur (assoc map (str \&quot;Chet\&quot;) (first partition))\n             (rest partition))\n      (recur (assoc map (str \&quot;Nechet\&quot;) (first partition))\n             (rest partition)))\n      )\n  )&quot;, :offset 332, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         partition (partition 1 vector)]\n    (if (= (rem '(first partition) 2 ) 0) \n      (recur (assoc map (str \&quot;Chet\&quot;) (first partition))\n             (rest partition))\n      (recur (assoc map (str \&quot;Nechet\&quot;) (first partition))\n             (rest partition)))\n      )\n  )&quot;, :offset 333, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         partition (partition 1 vector)]\n    (if (= (rem partition [0] 2 ) 0) \n      (recur (assoc map (str \&quot;Chet\&quot;) (first partition))\n             (rest partition))\n      (recur (assoc map (str \&quot;Nechet\&quot;) (first partition))\n             (rest partition)))\n      )\n  )&quot;, :offset 328, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         partition (partition 1 vector)]\n    (if (= (rem (nfirst partition) 2 ) 0) \n      (recur (assoc map (str \&quot;Chet\&quot;) (first partition))\n             (rest partition))\n      (recur (assoc map (str \&quot;Nechet\&quot;) (first partition))\n             (rest partition)))\n      )\n  )&quot;, :offset 333, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         partition (partition 1 vector)]\n    (if (= (rem (ffirst partition) 2 ) 0) \n      (recur (assoc map (str \&quot;Chet\&quot;) (first partition))\n             (rest partition))\n      (recur (assoc map (str \&quot;Nechet\&quot;) (first partition))\n             (rest partition)))\n      )\n  )&quot;, :offset 333, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         partition (partition 1 vector)]\n    (if (= 0 0)) \n      (recur (assoc map (str \&quot;Chet\&quot;) (first partition))\n             (rest partition))\n      (recur (assoc map (str \&quot;Nechet\&quot;) (first partition))\n             (rest partition)))\n      )&quot;, :offset 304, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)]\n    (if (= (rem vector [0]))) \n      (recur (assoc map (str \&quot;Chet\&quot;) (get vector))\n             vector)\n      (recur (assoc map (str \&quot;Nechet\&quot;) (get vector))\n             vector))\n      )&quot;, :offset 247, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)]\n    (if ()) \n      (recur (assoc map (str \&quot;Chet\&quot;) (get vector))\n             vector)\n      (recur (assoc map (str \&quot;Nechet\&quot;) (get vector))\n             vector))\n      )&quot;, :offset 229, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)]\n    (if ()\n      (recur (assoc map (str \&quot;Chet\&quot;) (get vector))\n             vector)\n      (recur (assoc map (str \&quot;Nechet\&quot;) (get vector))\n             vector)) \n      ))&quot;, :offset 229, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)]\n    (if(true?)\n      (recur (assoc map (str \&quot;Chet\&quot;) (get vector))\n             vector)\n      (recur (assoc map (str \&quot;Nechet\&quot;) (get vector))\n             vector)) \n      ))&quot;, :offset 233, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if ()\n        (recur (assoc map (str \&quot;Chet\&quot;) (get vector))\n               (inc i))\n        (recur (assoc map (str \&quot;Nechet\&quot;) (get vector))\n               (inc i)))\n      map\n      )))&quot;, :offset 296, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (- (count vector) - 1) i)\n      (if ()\n        (recur (assoc map (str \&quot;Chet\&quot;) (get vector))\n               (inc i))\n        (recur (assoc map (str \&quot;Nechet\&quot;) (get vector))\n               (inc i)))\n      map\n      )))&quot;, :offset 304, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (- (count vector) - 1) i)\n      (if (= (rem (get vector i) 0))\n        (recur (assoc map (str \&quot;Chet\&quot;) (get vector i))\n               (inc i))\n        (recur (assoc map (str \&quot;Nechet\&quot;) (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 332, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (- (count vector) 1) i)\n      (if (= (rem (get vector i) 0))\n        (recur (assoc map (str \&quot;Chet\&quot;) (get vector i))\n               (inc i))\n        (recur (assoc map (str \&quot;Nechet\&quot;) (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 330, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (- (count vector) 1) i)\n      (if (= (rem (get vector i) 2))\n        (recur (assoc map (str \&quot;Chet\&quot;) (get vector i))\n               (inc i))\n        (recur (assoc map (str \&quot;Nechet\&quot;) (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 330, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2))\n        (recur (assoc map (str \&quot;Chet\&quot;) (get vector i))\n               (inc i))\n        (recur (assoc map (str \&quot;Nechet\&quot;) (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 324, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2))\n        (recur (assoc map (conj :Chet (get vector i)))\n               (inc i))\n        (recur (assoc map (str \&quot;Nechet\&quot;) (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 324, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2))\n        ((conj map {:chet (get vector i)}) \n          (recur (assoc map)\n                   (inc i)))\n        (recur (assoc map (str \&quot;Nechet\&quot;) (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 347, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2))\n        (recur (assoc map (conj map :Chet (get vector i)))\n               (inc i))\n        (recur (assoc map (str \&quot;Nechet\&quot;) (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 328, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2))\n        (recur (assoc map (conj map \&quot;Chet\&quot; (get vector i)))\n               (inc i))\n        (recur (assoc map (str \&quot;Nechet\&quot;) (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 329, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2))\n        (recur (assoc map (conj map {\&quot;Chet\&quot; (get vector i)} ))\n               (inc i))\n        (recur (assoc map (str \&quot;Nechet\&quot;) (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 332, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2))\n        (recur (assoc map \&quot;Chet\&quot; (get vector i))\n               (inc i))\n        (recur (assoc map (str \&quot;Nechet\&quot;) (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 318, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2))\n        (recur (assoc map \&quot;Chet\&quot; (get vector i))\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 312, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (get vector i))\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 314, :ns &quot;lab1.core&quot;} {:command &quot;(group [4 8 15 16 23 23])&quot;, :offset 25, :ns &quot;lab1.core&quot;} {:command &quot;(group [4 8 15 16 23 423])&quot;, :offset 26, :ns &quot;lab1.core&quot;} {:command &quot;(vec)&quot;, :offset 5, :ns &quot;lab1.core&quot;} {:command &quot;(vec123)&quot;, :offset 8, :ns &quot;lab1.core&quot;} {:command &quot;(def vecf)&quot;, :offset 10, :ns &quot;lab1.core&quot;} {:command &quot;(def vecf 123)&quot;, :offset 14, :ns &quot;lab1.core&quot;} {:command &quot;(def vecf [123])&quot;, :offset 16, :ns &quot;lab1.core&quot;} {:command &quot;(def vecf (123))&quot;, :offset 16, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         cvec []\n         nvec []\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)) )\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 361, :ns &quot;lab1.core&quot;} {:command &quot;(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec\n         nvec\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)) )\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (conj cvec (get vector i)))\n               (inc i)))\n      map\n      )))&quot;, :offset 380, :ns &quot;lab1.core&quot;} {:command &quot;(defn group [vector]\n  (loop [map (array-map)\n         cvec (vector)\n         nvec (vector)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)) )\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (conj nvec (get vector i)))\n               (inc i)))\n      map\n      )))&quot;, :offset 370, :ns &quot;lab1.core&quot;} {:command &quot;(defn group [vector]\n  (loop [map (array-map)\n         cvec (vector)\n         nvec (vector)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)) )\n               cvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (conj nvec (get vector i)))\n               nvec\n               (inc i)))\n      map\n      )))&quot;, :offset 410, :ns &quot;lab1.core&quot;} {:command &quot;(defn group [vector]\n  (loop [map (array-map)\n         cvec (vector)\n         nvec (vector)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)) )\n               cvec\n               nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (conj nvec (get vector i)))\n               cvec\n               nvec\n               (inc i)))\n      map\n      )))&quot;, :offset 450, :ns &quot;lab1.core&quot;} {:command &quot;(defn group [vector]\n  (loop [map (array-map)\n         cvec (vector )\n         nvec (vector)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)) )\n               cvec\n               nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (conj nvec (get vector i)))\n               cvec\n               nvec\n               (inc i)))\n      map\n      )))&quot;, :offset 6} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj (get vector i)))\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 321, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)))\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 354, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec\n         nvec\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)))\n               'cvec\n               'nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (get vector i))\n               'cvec\n               'nvec\n               (inc i)))\n      map\n      )))&quot;, :offset 466, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         'cvec\n         'nvec\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)))\n               'cvec\n               'nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (get vector i))\n               'cvec\n               'nvec\n               (inc i)))\n      map\n      )))&quot;, :offset 468, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec\n         nvec\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)))\n               cvec\n               nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (get vector i))\n               cvec\n               nvec\n               (inc i)))\n      map\n      )))&quot;, :offset 462, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec (vector)\n         nvec (vector)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)))\n               cvec\n               nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (get vector i))\n               cvec\n               nvec\n               (inc i)))\n      map\n      )))&quot;, :offset 480, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec (vector &amp;)\n         nvec (vector &amp;)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)))\n               cvec\n               nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (get vector i))\n               cvec\n               nvec\n               (inc i)))\n      map\n      )))&quot;, :offset 484, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec (vector [&amp;])\n         nvec (vector [&amp;])\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)))\n               cvec\n               nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (get vector i))\n               cvec\n               nvec\n               (inc i)))\n      map\n      )))&quot;, :offset 488, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec []\n         nvec []\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)))\n               cvec\n               nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (get vector i))\n               cvec\n               nvec\n               (inc i)))\n      map\n      )))&quot;, :offset 468, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec []\n         nvec []\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; (conj cvec (get vector i)))\n               cvec\n               nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; (conj nvec(get vector i)))\n               cvec\n               nvec\n               (inc i)))\n      map\n      )))&quot;, :offset 479, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec []\n         nvec []\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        ((conj cvec (get vector i))\n          (recur (assoc map \&quot;Chet\&quot; cvec)\n                 cvec\n                 nvec\n                 (inc i)))\n        (recur (assoc map \&quot;Nechet\&quot; (conj nvec(get vector i)))\n               cvec\n               nvec\n               (inc i)))\n      map\n      )))&quot;, :offset 502, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec []\n         nvec []\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        ((conj cvec (get vector i))\n          (recur (assoc map \&quot;Chet\&quot; cvec)\n                 (conj cvecvec(get vector i))\n                 nvec\n                 (inc i)))\n        (recur (assoc map \&quot;Nechet\&quot; nvec)\n               cvec\n               (conj nvec(get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 526, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec []\n         nvec []\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        ((conj cvec (get vector i))\n          (recur (assoc map \&quot;Chet\&quot; cvec)\n                 (conj cvec(get vector i))\n                 nvec\n                 (inc i)))\n        (recur (assoc map \&quot;Nechet\&quot; nvec)\n               cvec\n               (conj nvec(get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 523, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec []\n         nvec []\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        ((recur (assoc map \&quot;Chet\&quot; cvec)\n                 (conj cvec(get vector i))\n                 nvec\n                 (inc i)))\n        (recur (assoc map \&quot;Nechet\&quot; nvec)\n               cvec\n               (conj nvec(get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 486, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [map (array-map)\n         cvec []\n         nvec []\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; cvec)\n               (conj cvec(get vector i))\n               nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; nvec)\n               cvec\n               (conj nvec(get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 478, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         cvec []\n         nvec []\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; cvec)\n               (conj cvec(get vector i))\n               nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; nvec)\n               cvec\n               (conj nvec(get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 450, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         cvec []\n         nvec []\n         i 0]\n    (if-not(= (+ 2 (count vector)) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; cvec)\n               (conj cvec(get vector i))\n               nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; nvec)\n               cvec\n               (conj nvec(get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 456, :ns &quot;lab1.core&quot;} {:command &quot;(group [4 8 15 16 23 37 42])&quot;, :offset 28, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [map (array-map)\n         cvec []\n         nvec []\n         i 0]\n    (if-not(= (+ 1 (count vector)) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur (assoc map \&quot;Chet\&quot; cvec)\n               (conj cvec(get vector i))\n               nvec\n               (inc i))\n        (recur (assoc map \&quot;Nechet\&quot; nvec)\n               cvec\n               (conj nvec(get vector i))\n               (inc i)))\n      map\n      )))&quot;, :offset 456, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(def cvec [])\n(def nvec [])\n(defn group [vector]\n  (loop [\n         cvec []\n         nvec []\n         map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur\n                (conj cvec(get vector i)) \n                nvec\n               (assoc map \&quot;Chet\&quot; cvec)\n               (inc i))\n        (recur\n          cvec\n          (conj nvec(get vector i))\n          (assoc map \&quot;Nechet\&quot; nvec)\n          (inc i)))\n      map\n      )))&quot;, :offset 501, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [\n         cvec []\n         nvec []\n         map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur\n                (conj cvec(get vector i)) \n                nvec\n               (assoc map \&quot;Chet\&quot; cvec)\n               (inc i))\n        (recur\n          cvec\n          (conj nvec(get vector i))\n          (assoc map \&quot;Nechet\&quot; nvec)\n          (inc i)))\n      map\n      )))&quot;, :offset 473, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [\n         cvec []\n         nvec []\n         map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur\n                (conj cvec(get vector i)) \n                nvec\n               (assoc map \&quot;Chet\&quot; cvec)\n               (inc i))\n        (recur\n          cvec\n          (conj nvec(get vector i))\n          (assoc map \&quot;Nechet\&quot; (conj nvec(get vector i)))\n          (inc i)))\n      map\n      )))&quot;, :offset 494, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n(defn group [vector]\n  (loop [\n         cvec []\n         nvec []\n         map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur\n                (conj cvec(get vector i)) \n                nvec\n               (assoc map \&quot;Chet\&quot; (conj cvec(get vector i)))\n               (inc i))\n        (recur\n          cvec\n          (conj nvec(get vector i))\n          (assoc map \&quot;Nechet\&quot; (conj nvec(get vector i)))\n          (inc i)))\n      map\n      )))&quot;, :offset 515, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core)\n\n(defn group [vector]\n  (loop [\n         cvec []\n         nvec []\n         map (array-map)\n         i 0]\n    (if-not(= (count vector) i)\n      (if (= (rem (get vector i) 2) 0)\n        (recur\n          (conj cvec(get vector i))\n          nvec\n          (assoc map \&quot;Chet\&quot; (conj cvec(get vector i)))\n          (inc i))\n        (recur\n          cvec\n          (conj nvec(get vector i))\n          (assoc map \&quot;Nechet\&quot; (conj nvec(get vector i)))\n          (inc i)))\n      map\n      )))&quot;, :offset 493, :ns &quot;user&quot;} {:command &quot;(group [4 8 15 16 23 42])&quot;, :offset 25, :ns &quot;lab1.core&quot;} {:command &quot;(ns lab1.core-test\n  (:require [clojure.test :refer :all]\n            [lab1.core :refer :all]))\n\n(deftest mytest (testing \&quot;test group\&quot; (are [result param]\n                                           (= result (group param))\n                                           '{\&quot;Chet\&quot; [4 8 16 42], \&quot;Nechet\&quot; [15 23]} [4 8 15 16 23 42]\n                                           '{\&quot;Chet\&quot; [22 44], \&quot;Nechet\&quot; [17 1 33]} [17 1 22 33 44]\n                                           '{\&quot;Chet\&quot; [1 2 3], \&quot;Nechet\&quot; [4 5]} [1 2 3 4 5])))&quot;, :offset 512, :ns &quot;lab1.core&quot;} {:command &quot;(run-tests 'lab1.core-test)&quot;, :offset 27, :ns &quot;lab1.core-test&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.REPL">
    <configuration name="REPL" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="lab1" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <module name="" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="0" />
      <module name="" />
      <method v="2" />
    </configuration>
    <configuration name="core_test" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="lab1" />
      <setting name="path" value="$PROJECT_DIR$/test/lab1/core_test.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/test/lab1" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure Application.core_test" />
      <item itemvalue="Clojure REPL.REPL" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.core_test" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="61758e3f-2a65-4e3d-82c3-1d8f20c004f5" name="Default Changelist" comment="" />
      <created>1552862242742</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1552862242742</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="-8" y="-8" width="1382" height="744" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.27609682" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.3289689" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" />
      <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" />
      <window_info anchor="bottom" id="Version Control" order="9" />
      <window_info anchor="bottom" id="Messages" order="10" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" id="REPL" order="6" side_tool="true" weight="0.35098335" />
      <window_info anchor="right" id="Leiningen" order="7" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
    </layout>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/lab1/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret selection-end-line="23" selection-end-column="25" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/test/lab1/core_test.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="153">
          <caret line="9" column="29" selection-start-line="9" selection-start-column="29" selection-end-line="9" selection-end-column="29" />
        </state>
      </provider>
    </entry>
  </component>
</project>